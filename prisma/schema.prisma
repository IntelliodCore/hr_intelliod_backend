// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  role        UserRole @default(EMPLOYEE)
  password    String?
  isActive    Boolean  @default(true)
  isFirstLogin Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  profile     EmployeeProfile?
  invitation  EmployeeInvitation?
  onboarding  EmployeeOnboarding?
  documents   Document[]
  createdInvitations EmployeeInvitation[] @relation("InvitedBy")
  approvedOnboardings EmployeeOnboarding[] @relation("ApprovedBy")

  @@map("users")
}

model EmployeeInvitation {
  id              String            @id @default(cuid())
  email           String            @unique
  tempPassword    String
  status          InvitationStatus  @default(SENT)
  invitedById     String
  userId          String?           @unique
  sentAt          DateTime          @default(now())
  completedAt     DateTime?
  expiresAt       DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  invitedBy       User              @relation("InvitedBy", fields: [invitedById], references: [id])
  user            User?             @relation(fields: [userId], references: [id])

  @@map("employee_invitations")
}

model EmployeeProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  employeeId      String   @unique
  
  // Personal Information
  firstName       String?
  lastName        String?
  middleName      String?
  dateOfBirth     DateTime?
  gender          Gender?
  maritalStatus   MaritalStatus?
  nationality     String?
  
  // Contact Information
  phone           String?
  personalEmail   String?
  alternatePhone  String?
  
  // Address Information
  currentAddress  Json?
  permanentAddress Json?
  
  // Emergency Contact
  emergencyContact Json?
  
  // Bank Details
  bankDetails     Json?
  
  // System Information
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("employee_profiles")
}

model EmployeeOnboarding {
  id              String           @id @default(cuid())
  userId          String           @unique
  status          OnboardingStatus @default(PENDING)
  submittedAt     DateTime?
  approvedAt      DateTime?
  approvedById    String?
  rejectedAt      DateTime?
  rejectionReason String?
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  approvedBy      User?            @relation("ApprovedBy", fields: [approvedById], references: [id])

  @@map("employee_onboardings")
}

model Document {
  id          String      @id @default(cuid())
  userId      String
  type        DocumentType
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  uploadedAt  DateTime    @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String
  entity      String
  entityId    String
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  @@map("audit_logs")
}

enum UserRole {
  ADMIN
  HR
  MANAGER
  EMPLOYEE
}

enum InvitationStatus {
  SENT
  PENDING
  COMPLETED
  EXPIRED
}

enum OnboardingStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  OTHER
}

enum ContractType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERN
}

enum WorkLocation {
  OFFICE
  REMOTE
  HYBRID
}

enum DocumentType {
  ID_DOCUMENT
  RESUME
  CERTIFICATE
  CONTRACT
  BANK_STATEMENT
  OTHER
}